module Inoculate
  VERSION: String

  interface _ToSymbol
    def to_sym: () -> Symbol
  end

  type callable = ^() -> untyped
  type lifecycle_name = :transient | :instance
  type builder_name = Symbol
  type blueprint = { lifecycle: lifecycle_name, factory: callable, accessor_module: Module? }

  module Errors
    class Error < StandardError
    end

    class InvalidName < Error
    end

    class AlreadyRegistered < Error
    end

    class UnknownName < Error
    end

    class RequiresCallable < Error
    end
  end

  module Providers
  end

  class Manufacturer
    attr_reader registered_blueprints: Hash[builder_name, blueprint]
    def transient: (builder_name | _ToSymbol) { () -> void } -> void
    def instance: (builder_name | _ToSymbol) { () -> void } -> void
  end

  class Configurer
    def initialize: (Manufacturer) -> void

    def transient: (builder_name | _ToSymbol) { () -> void } -> nil
    def instance: (builder_name | _ToSymbol) { () -> void } -> nil

    private

    attr_reader manufacturer: Manufacturer
  end

  module Porter
    def self.[]: (Symbol) -> Module
  end

  def self.initialize: () { (Configurer) -> void } -> void

  # "Private"
  def self.manufacturer: () -> Manufacturer
end
