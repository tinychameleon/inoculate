module Inoculate
  VERSION: String

  module Errors
    class Error < StandardError
    end

    class InvalidName < Error
    end

    class UnknownName < Error
    end

    class RequiresCallable < Error
    end
  end

  interface _ToSymbol
    def to_sym: () -> Symbol
  end

  type callable = ^() -> untyped
  type lifecycle_name = :transient
  type builder_name = Symbol
  type blueprint = { lifecycle: lifecycle_name, builder: callable, accessor_module: Module? }

  module Manufacturer
    class Factory
      attr_reader registered_blueprints: Hash[builder_name, blueprint]
      def transient: (builder_name | _ToSymbol, callable?) -> void
      def build: (builder_name) -> Module

      private

      def validate_builder_name: (builder_name) -> void
    end

    module Providers
    end
  end

  module Porter
    module ClassMethods
      def inoculate_with: (*builder_name) -> void
    end
  end
end
